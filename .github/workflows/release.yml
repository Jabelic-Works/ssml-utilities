name: Release SSML Utilities Package

on:
  workflow_dispatch:
    inputs:
      package:
        description: "リリースするパッケージを選択"
        required: true
        type: choice
        options:
          - "@ssml-utilities/core"
          - "@ssml-utilities/highlighter"
          - "@ssml-utilities/react-editor"
      version:
        description: "バージョン (major, minor, patch, または具体的なバージョン)"
        required: true
        default: "patch"
      tag:
        description: "npm タグ (latest, beta, など)"
        required: true
        default: "latest"
      update_dependent_packages:
        description: "依存パッケージも更新する"
        required: true
        type: boolean
        default: false

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Get package directory name
        id: get-directory
        run: |
          # スコープ名を除去してディレクトリ名を取得
          PACKAGE_NAME="${{ github.event.inputs.package }}"
          if [ "$PACKAGE_NAME" = "@ssml-utilities/react-editor" ]; then
            echo "directory=editor-react" >> $GITHUB_OUTPUT
          else
            DIRECTORY_NAME=${PACKAGE_NAME#@ssml-utilities/}
            echo "directory=$DIRECTORY_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Build selected package
        run: |
          pnpm --filter ${{ github.event.inputs.package }} run build

      - name: Calculate new versions
        id: calc-versions
        run: |
          # メインパッケージのバージョンを更新
          cd packages/${{ steps.get-directory.outputs.directory }}
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # semver をインストール
          npm install -g semver

          if [[ "${{ github.event.inputs.version }}" = "major" ]]; then
            NEW_VERSION=$(semver -i major $CURRENT_VERSION)
          elif [[ "${{ github.event.inputs.version }}" = "minor" ]]; then
            NEW_VERSION=$(semver -i minor $CURRENT_VERSION)
          elif [[ "${{ github.event.inputs.version }}" = "patch" ]]; then
            NEW_VERSION=$(semver -i patch $CURRENT_VERSION)
          else
            NEW_VERSION="${{ github.event.inputs.version }}"
          fi

          # package.json のバージョンフィールドのみを更新
          pnpm pkg set version=$NEW_VERSION

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # 依存パッケージも更新する場合
          if [[ "${{ github.event.inputs.update_dependent_packages }}" == "true" ]]; then
            PACKAGE_NAME="${{ github.event.inputs.package }}"
            UPDATED_PACKAGES="$PACKAGE_NAME@$NEW_VERSION"
            
            if [ "$PACKAGE_NAME" = "@ssml-utilities/core" ]; then
              # highlighter を更新
              cd $GITHUB_WORKSPACE/packages/highlighter
              HIGHLIGHTER_VERSION=$(node -p "require('./package.json').version")
              HIGHLIGHTER_NEW_VERSION=$(semver -i patch $HIGHLIGHTER_VERSION)
              pnpm pkg set version=$HIGHLIGHTER_NEW_VERSION
              UPDATED_PACKAGES="$UPDATED_PACKAGES @ssml-utilities/highlighter@$HIGHLIGHTER_NEW_VERSION"
              
              # react-editor を更新
              cd $GITHUB_WORKSPACE/packages/editor-react
              EDITOR_VERSION=$(node -p "require('./package.json').version")
              EDITOR_NEW_VERSION=$(semver -i patch $EDITOR_VERSION)
              pnpm pkg set version=$EDITOR_NEW_VERSION
              UPDATED_PACKAGES="$UPDATED_PACKAGES @ssml-utilities/react-editor@$EDITOR_NEW_VERSION"
              
            elif [ "$PACKAGE_NAME" = "@ssml-utilities/highlighter" ]; then
              # react-editor を更新
              cd $GITHUB_WORKSPACE/packages/editor-react
              EDITOR_VERSION=$(node -p "require('./package.json').version")
              EDITOR_NEW_VERSION=$(semver -i patch $EDITOR_VERSION)
              pnpm pkg set version=$EDITOR_NEW_VERSION
              UPDATED_PACKAGES="$UPDATED_PACKAGES @ssml-utilities/react-editor@$EDITOR_NEW_VERSION"
            fi
            
            echo "updated_packages=$UPDATED_PACKAGES" >> $GITHUB_OUTPUT
          fi

      - name: Build dependent packages
        if: ${{ github.event.inputs.update_dependent_packages == 'true' }}
        run: |
          # 依存するパッケージを適切な順序でビルド
          if [ "${{ github.event.inputs.package }}" = "@ssml-utilities/core" ]; then
            pnpm --filter "@ssml-utilities/highlighter" run build
            pnpm --filter "@ssml-utilities/react-editor" run build
          elif [ "${{ github.event.inputs.package }}" = "@ssml-utilities/highlighter" ]; then
            pnpm --filter "@ssml-utilities/react-editor" run build
          fi

      - name: Commit changes and create tags
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # 変更を追加
          git add packages/*/package.json

          # メインパッケージのコミットとタグ
          MAIN_PACKAGE="${{ github.event.inputs.package }}"
          MAIN_VERSION="${{ steps.calc-versions.outputs.new_version }}"
          git commit -m "Release $MAIN_PACKAGE@$MAIN_VERSION"
          git tag "$MAIN_PACKAGE@$MAIN_VERSION"

          # 依存パッケージが更新された場合、追加のタグを作成
          if [[ "${{ github.event.inputs.update_dependent_packages }}" == "true" ]]; then
            for PACKAGE_INFO in ${{ steps.calc-versions.outputs.updated_packages }}; do
              # 最初のパッケージ（メイン）はスキップ
              if [ "$PACKAGE_INFO" != "$MAIN_PACKAGE@$MAIN_VERSION" ]; then
                PACKAGE_NAME=${PACKAGE_INFO%@*}
                PACKAGE_VERSION=${PACKAGE_INFO#*@}
                git tag "$PACKAGE_NAME@$PACKAGE_VERSION"
              fi
            done
          fi

          # 変更をプッシュ
          git push
          git push --tags

      - name: Generate Release Notes
        id: release-notes
        run: |
          PACKAGE_NAME="${{ github.event.inputs.package }}"
          PACKAGE_NAME_ESC=$(echo $PACKAGE_NAME | sed 's/\//\\\//g' | sed 's/\@/\\\@/g')
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep "$PACKAGE_NAME_ESC@" | sed -n 2p)

          if [ -z "$PREVIOUS_TAG" ]; then
            # 最初のリリースの場合
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s (%h)" -n 10 -- packages/${{ steps.get-directory.outputs.directory }} >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD -- packages/${{ steps.get-directory.outputs.directory }} >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.package }}@${{ steps.calc-versions.outputs.new_version }}
          name: ${{ github.event.inputs.package }} v${{ steps.calc-versions.outputs.new_version }}
          body: |
            ## 変更点
            ${{ steps.release-notes.outputs.CHANGELOG }}

            ${{ github.event.inputs.update_dependent_packages == 'true' && '## 依存パッケージも更新されました' || '' }}
          draft: false
          prerelease: ${{ github.event.inputs.tag != 'latest' }}

      - name: Publish to npm
        run: |
          # メインのパッケージを公開
          cd packages/${{ steps.get-directory.outputs.directory }}
          pnpm publish --access public --tag ${{ github.event.inputs.tag }} --no-git-checks

          # 依存パッケージも公開
          if [[ "${{ github.event.inputs.update_dependent_packages }}" == "true" ]]; then
            if [ "${{ github.event.inputs.package }}" = "@ssml-utilities/core" ]; then
              # highlighter を公開
              cd $GITHUB_WORKSPACE/packages/highlighter
              pnpm publish --access public --tag ${{ github.event.inputs.tag }} --no-git-checks
              
              # react-editor を公開
              cd $GITHUB_WORKSPACE/packages/editor-react
              pnpm publish --access public --tag ${{ github.event.inputs.tag }} --no-git-checks
            
            elif [ "${{ github.event.inputs.package }}" = "@ssml-utilities/highlighter" ]; then
              # react-editor を公開
              cd $GITHUB_WORKSPACE/packages/editor-react
              pnpm publish --access public --tag ${{ github.event.inputs.tag }} --no-git-checks
            fi
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
